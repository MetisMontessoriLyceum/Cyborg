

typedef struct {
  int low;
  int normal;
  int high;
} deg;

void setDeg(deg &toWrite, int value) {
  toWrite.low = -360 + value;
  toWrite.normal = value;
  toWrite.high = 360 + value;
}

int imuHeading () {
  return IMU_ReadCompassHeading(IN_1,0x22);
}
accl imuAccel () {
  IMU_ReadAcceleration(IN_1, 0x22, currAccl);
  return currAccl;
}
gyro imuGyro () {
  IMU_ReadGyro(IN_1, 0x22, currGyro);
  return currGyro;
}

void Move (int left, int right) {
  if (left > 100) {
    float change = left/100;
    left = left/change;
    right = right/change;
  }
  else if (left < -100) {
    float change = left/-100;
    left = left/change;
    right = right/change;
  }
  if (right > 100) {
    float change = right/100;
    left = left/change;
    right = right/change;
  }
  else if (right < -100) {
    float change = right/-100;
    left = left/change;
    right = right/change;
  }

  if (left == 0) {
    Off(OUT_C);
  }
  else {
    OnRev(OUT_C,left);
  }
  if (right == 0) {
    Off(OUT_A);
  }
  else {
    OnRev(OUT_A,right);
  }

}

void CorrectSens (byte &array[]) {
  for (int i=0; i < 8; i++) {
    if (array[i] < 0) {
      array[i] = 0;
    }
    else if (array[i] > 100) {
      array[i] = 100;
    }
    array[i] = 100 - array[i];
  }
}

bool seeLine (byte sensor[]) {
  return (sensor[0] > 20 || sensor[1] > 20 || sensor[2] > 20 || sensor[3] > 20 || sensor[4] > 20 || sensor[5] > 20 || sensor[6] > 20 || sensor[7] > 20);
}

int getError (byte sensor[]) {
  int error;
  error = 350 - (sensor[0] + sensor[1]*100 + sensor[2]*200 + sensor[3]*300 + sensor[4]*400 + sensor[5]*500 + sensor[6]*600 + sensor[7]*700) / ( sensor[0] + sensor[1] + sensor[2] + sensor[3] + sensor[4] + sensor[5] + sensor[6] + sensor[7] );
  if (error >= 350 || error <= -350) {
    if (!seeLine(sensor) && memory > -250 && memory < 250) {
      error = 0;
    }
    else if (lastError > 351) {
      error = lastError + 1;
    }
    else if (lastError < -351) {
      error = lastError - 1;
    }
    else if (lastError >= 0) {
      error = 352;
    }
    else {
      error = -352;
    }
  }
  return error;
}

void init () {
  SetSensorLowspeed(IN_2);
  LSA_WakeUp(IN_2, 0x14);
  IMU_SendCommand(IN_1, 0x22, '1');
  Wait(50);
}
