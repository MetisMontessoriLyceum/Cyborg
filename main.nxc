/********************************************
 * ROBOCUP JUNIOR 2015 RESCUE LINE - CYBORG *
 * ======================================== *
 *                                          *
 * PORTS:                                   *
 * IN_1    Gyro (0x14)                      *
 * IN_2    SensorArray (0x22)               *
 * IN_3                                     *
 * IN_4    Splitter                         *
 * IN_4_1  EyeRight                         *
 * IN_4_2  EyeFront                         *
 * IN_4_3  NormalSensor                     *
 * IN_4_4  EyeLeft                          *
 *                                          *
 * Code written by: Noah Loomans            *
 * Robot build by: River van der Meulen     *
 ********************************************/

// include libraries
#include "NXCDefs.h"
#include "lib/HTSMUX-driver.h"
#include "lib/LSA-lib.nxc"
#include "lib/IMU-lib.nxc"
#include "lib/menu.nxc"

// define colors
#define BLACK 90
#define WHITE 10

// for splitter
// becuse IN_4_2 make more sense then msensor_S4_2
#define IN_1_1 msensor_S1_1
#define IN_1_2 msensor_S1_2
#define IN_1_3 msensor_S1_3
#define IN_1_4 msensor_S1_4
#define IN_2_1 msensor_S2_1
#define IN_2_2 msensor_S2_2
#define IN_2_3 msensor_S2_3
#define IN_2_4 msensor_S2_4
#define IN_3_1 msensor_S3_1
#define IN_3_2 msensor_S3_2
#define IN_3_3 msensor_S3_3
#define IN_3_4 msensor_S3_4
#define IN_4_1 msensor_S4_1
#define IN_4_2 msensor_S4_2
#define IN_4_3 msensor_S4_3
#define IN_4_4 msensor_S4_4

// define ports
#define MOTOR_LEFT OUT_A
#define MOTOR_RIGHT OUT_C
#define MOTOR_BALL OUT_B
#define SENS_PORT IN_2
#define SENS_CODE 0x14

// define const
#define FOLLOW_LINE 0
#define MOVE_LEFT 1
#define MOVE_RIGHT 2
#define MOVE_GREEN_LEFT 3
#define MOVE_GREEN_RIGHT 4
#define MOVE_PEN 5
#define MOVE_UP 6
#define MOVE_DOWN 7
#define OBSTACLE 8
#define MOVE_FORWARD 9
#define EVACUATION_FIELD 10
#define LEFT 0
#define RIGHT 1
#define FRONT 2
#define NOLINE_LINE 0
#define LINE 1
#define NOLINE 2
#define MIDDLE 3
#define COLOR_BLACK 0
#define COLOR_GREEN 1
#define COLOR_WHITE 2
#define UP 0
#define DOWN 1



// for easy modifying
#define WAIT_TIME 50
#define SECOND_WAIT_TIME 150
#define PEN_MIN -20
#define PEN_MAX -9
#define PEN_CHECK 2


// define public values
int moving = 0;
unsigned byte sens[8];
float memory = 0;
int lastError = 0;
int lastStatus = FOLLOW_LINE;
int lastTilt = 0;
long lastTick;
long startTick;
long lastRotaA = 0;
long lastRotaC = 0;
float penMemory = 0;
float penMax = 0;

int startTiltX;
int startTiltY;


typedef struct {
  int light;
  int dark;
} calibration;

calibration caliMiddleSens;

// for easy debuging
// use: Debug("sen1",42,1);
// on display: "sen1: 42"
void Debug (string name, int num, int line) {
  switch (line) {
    case 1:
      line = LCD_LINE1;
      break;
    case 2:
      line = LCD_LINE2;
      break;
    case 3:
      line = LCD_LINE3;
      break;
    case 4:
      line = LCD_LINE4;
      break;
    case 5:
      line = LCD_LINE5;
      break;
    case 6:
      line = LCD_LINE6;
      break;
      
    case 7:
      line = LCD_LINE7;
      break;
    case 8:
      line = LCD_LINE8;
      break;
  }
  string toDebug;
  toDebug = name + ": "+NumToStr(num);
  ClearLine(line);
  TextOut(0,line,toDebug);
}

void readCali () {
  string buffer;
  byte file = fopen("caliSensMiddle.txt", "r");
  if (file == NULL) {
    StopAllTasks();
  }

  fgets(buffer, 10, file);
  caliMiddleSens.light = atol(buffer);

  fgets(buffer, 10, file);
  caliMiddleSens.dark = atol(buffer);

  fclose(file);
}

int getSens (int port) {

  float ret;

  if (port == IN_1 || port == IN_1 || port == IN_1 || port == IN_1) {
    ret = Sensor(port);
  }
  else {
    ret = smuxSensorLegoLightNorm(port);
  }
  Debug("before",ret,4);
  ret = (ret - caliMiddleSens.light) * (100/(caliMiddleSens.dark - caliMiddleSens.light));
  Debug("after",ret,5);
  return ret;
}

void initAccr () {
  IMU_Init(IN_1);
  IMU_SendCommand(IN_1, 0x22, '4');
  Wait(100);
}

// allows easy controll over the motors, use: Move(70,70);
// to turn off autofix use Move(70,70,false);
void Move (int left, int right, bool autofix = true) {

  if (autofix) {

    if (left > 0) {
      left = left * 0.4 + 60;
    }
    else if (left < 0) {
      left = left * 0.4 - 60;
    }
    if (right > 0) {
      right = right * 0.4 + 60;
    }
    else if (right < 0) {
      right = right * 0.4 - 60;
    }
  }
  
  if (left > 100) {
    left = 100;
  }
  else if (left < -100) {
    left = -100;
  }

  if (right > 100) {
    right = 100;
  }
  else if (right < -100) {
    right = -100;
  }
  
  if (left == 0) {
    Off(OUT_A);
  }
  else {
    OnRev(OUT_A,left);
  }
  if (right == 0) {
    Off(OUT_C);
  }
  else {
    OnRev(OUT_C,right);
  }
}

void MoveTo(int dir, unsigned long waitTime = 0, int speed = 75) {
  if (dir == LEFT) {
    OnRevSync(OUT_AC, speed, -100);
  }
  else if (dir == RIGHT) {
    OnRevSync(OUT_AC, speed, 100);
  }
  else {
    OnRevSync(OUT_AC, speed, 0);
  }
  if (waitTime != 0) {
    Wait(waitTime);
  }
}

void StopMove () {
  Off(OUT_AC);
  Wait(50);
}

// reverses the value, always call after refreshing sensor values


void CorrectSens (byte &array[]) {
  for (int i=0; i < 8; i++) {
    if (array[i] < 0) {
      array[i] = 0;
    }
    else if (array[i] > 100) {
      array[i] = 100;
    }
    array[i] = 100 - array[i];
  }
  int tmp[8];
  tmp = array;
  for (int i=0; i<8; i++) {
    tmp[i] = (tmp[i] - 10) * 1.25;
    
    if (tmp[i] < 0) {
      tmp[i] = 0;
    }
    if (tmp[i] > 100) {
      tmp[i] = 100;
    }
    
  }
  array = tmp;
}



bool needFix (unsigned byte sensor[]) {
  bool ret = true;
  int i;
  for (int i=0; i<8; i++) {
    if (sensor[i] == 0) {
      ret = false;
      break;
    }
  }
  return ret;
}

void valueFixer(unsigned byte &sensor[]) {

  int black1 = 0;
  int black2 = 1;
  int black3 = 2;
  int tmp1;
  int tmp2;
  int tmp3;
  int i;
  int change;

  while (true) {
    change = 0;
    for (i=0;i<8;i++) {
      if (sensor[i] > sensor[black1]) {
        tmp1 = black1;
        black1 = i;
        tmp2 = black2;
        black2 = tmp1;
        black3 = tmp2;
        change = change + 1;
      }
      else if (i != black1 && sensor[i] > sensor[black2]) {
        tmp2 = black2;
        black2 = i;
        black3 = tmp2;
        change = change + 1;
      }
      else if (i != black1 && i != black2 && sensor[i] > sensor[black3]) {
        black3 = i;
        change = change + 1;
      }
    }
    if (change == 0) {
      break;
    }
  }

  for (i=0;i<8;i++) {
    if (i == black1 || i == black2 || i == black3) {
      sensor[i] = 100;
    }
    else {
      sensor[i] = 0;
    }
  }
}

// short way for getting ultrasonic sensor values
int sensUS (int port) {
  if (port == LEFT) {
    port = IN_4_4;
  }
  else if (port == RIGHT) {
    port = IN_4_1;
  }
  else if (port == FRONT) {
    port = IN_4_2;
  }
  return smuxSensorLegoUS(port);
}

int getLineWidth (unsigned byte sensor[], int &lowestIndex, int &highestIndex, int lineColVal = 60 ) {

  lowestIndex = 7;
  highestIndex = 0;
  int j;
  for (j=0; j<8; j++) {
    if (sensor[j] > lineColVal) {
      if (j < lowestIndex) {
        lowestIndex = j;
      }
      if (j > highestIndex) {
        highestIndex = j;
      }
    }
  }

  int lineWidth;
  if (lowestIndex > highestIndex) {
    lineWidth = 0;
  }
  else {
    lineWidth = highestIndex - lowestIndex;
  }

  return lineWidth;

}



void moveBack (int moveTime, int dir) {
  MoveTo(!dir,moveTime);
  StopMove();

  Move(75,75,false);
  Wait(200);
  StopMove();
}

// returns what the robot needs to do
// possible outcomes:
//  - FOLLOW_LINE (use P controller)
//  - MOVE_LEFT
//  - MOVE_RIGHT
//  - MOVE_FORWARD
//  - MOVE_UP
//  - OBSTACLE

int getStatus (unsigned byte &sensor[]) {

  if (getSens(IN_4_3) > 90) {
    return EVACUATION_FIELD;
  }

  accl tilt;
  IMU_ReadAcceleration(IN_1, 0x22, tilt);
  int tiltTX = tilt.tx;
  //NumOut(0,LCD_LINE1,tiltTX,true);
  Debug("tiltTX",tiltTX,3);
  if (tiltTX - startTiltX < -40) {
    return MOVE_UP;

    /*int change = tiltTX - lastTilt;
    if (change < 0) {
      change = -change;
    }
    if (change > 25) {
      if (lastStatus == MOVE_UP) {
        lastTilt = tiltTX;
        return MOVE_UP;
      }
    }
    else {
      lastStatus = MOVE_UP;
      lastTilt = tiltTX;
      return MOVE_UP;
    }*/
  }

  if (tiltTX - startTiltX > 40) {
    return MOVE_DOWN;
  }



  if (needFix(sensor)) {
    valueFixer(sensor);
    lastStatus = FOLLOW_LINE;
    return FOLLOW_LINE;
  }
  
  int status = FOLLOW_LINE;
  
  if (sensUS(FRONT) < 11) {
    status = OBSTACLE;
    return status;
  }

  int lowestIndex;
  int highestIndex;
  int lineWidth = getLineWidth(sensor,lowestIndex,highestIndex,60);

  if (lineWidth > 4) {
  
    int distToSideRight = lowestIndex;
    int distToSideLeft = 7 - highestIndex;
    int dir;

    if (distToSideRight < distToSideLeft) {
      status = MOVE_RIGHT;
    }
    else if (distToSideLeft < distToSideRight) {
      status = MOVE_LEFT;
    }
    else {
      status = FOLLOW_LINE;
    }

    lastStatus  = status;
    return status;
  }
}

// returns true if the robot can see a line
bool seeLine (byte sensor[], int mode = 0) {
  bool ret;
  switch (mode) {
    case 0:
      break;
    case 1:
      break;
    case 2:
      break;
  }
  // todo: give names to mode 1 and 0
  
  if (mode == 1) {
    ret = (sensor[0] > BLACK && sensor[1] > BLACK && sensor[2] > BLACK && sensor[3] > BLACK && sensor[4] > BLACK && sensor[5] > BLACK && sensor[6] > BLACK && sensor[7] > BLACK);
  }
  else if (mode == 0) {
    ret = (sensor[0] > BLACK || sensor[1] > BLACK || sensor[2] > BLACK || sensor[3] > BLACK || sensor[4] > BLACK || sensor[5] > BLACK || sensor[6] > BLACK || sensor[7] > BLACK);
  }
  else if (mode == MIDDLE) {
    ret = (sensor[0] < 60 && sensor[1] < 60 && sensor[6] < 60 && sensor[7] < 60);
  }
  return ret;
}



// keeps running until a line is visible
void untilSeeLine (int mode = 1) {
  int i;
  if (mode == MIDDLE) {
    while (true) {
      for (i=0; i<8; i++) {
        sens[i] = 0;
      }
      if( LSA_ReadRaw_Calibrated (SENS_PORT, SENS_CODE, sens) ) {
        CorrectSens(sens);
        int lowestIndex;
        int highestIndex;
        if (getLineWidth(sens,lowestIndex,highestIndex,60) <= 4) {
          break;
        }
        
      }
    }
  }
  else if (mode == NOLINE_LINE || mode == NOLINE) {
    while (true) {
      for (i=0; i<8; i++) {
        sens[i] = 0;
      }
      if( LSA_ReadRaw_Calibrated (SENS_PORT, SENS_CODE, sens) ) {
        CorrectSens(sens);
        if (!seeLine(sens)) {
          break;
        }
      }
    }
  }
  else if (mode == NOLINE_LINE || mode == LINE) {
    while (true) {
      for (i=0; i<8; i++) {
        sens[i] = 0;
      }
      if( LSA_ReadRaw_Calibrated (SENS_PORT, SENS_CODE, sens) ) {
        CorrectSens(sens);
        if (seeLine(sens)) {
          break;
        }
      }
    }
  }
}

// returns true if the robot is moving
// false is robot is not moving
// use this to detect obstacles
bool isMoving () {
  return true;

  long Ticks = CurrentTick() - lastTick;
  long rawRotaA = MotorRotationCount(OUT_A);
  long rawRotaC = MotorRotationCount(OUT_C);
  if (rawRotaA < 0) {
    rawRotaA = -rawRotaA;
  }
  if (rawRotaC < 0) {
    rawRotaC = -rawRotaC;
  }
  long RotaA = rawRotaA - lastRotaA;
  long RotaC = rawRotaC - lastRotaC;
  
  float MovedA = RotaA/Ticks;
  float MovedC = RotaC/Ticks;

  lastRotaA = rawRotaA;
  lastRotaC = rawRotaC;
  
  lastTick = CurrentTick();

  int _isMoving = MovedA > 0.3 || MovedC > 0.3 || CurrentTick() < startTick + 1000;
  
  int recheck = false;
  if (_isMoving && moving < 2) {
    moving++;
    recheck = true;
  }
  else if (!_isMoving) {
    moving = 0;
  }

  return _isMoving || recheck;
}

// calculates the error for the PID controller
int getError (unsigned byte sensor[]) {
  int error;
  error = 350 - (sensor[0] + sensor[1]*100 + sensor[2]*200 + sensor[3]*300 + sensor[4]*400 + sensor[5]*500 + sensor[6]*600 + sensor[7]*700) / ( sensor[0] + sensor[1] + sensor[2] + sensor[3] + sensor[4] + sensor[5] + sensor[6] + sensor[7] );
  if (error <= -340 || error >= 340) {
    error = 0;
    // line is lost, is it a gap?
    if (memory > -350 && memory < 300) {
      error = 0;
    }
    else if (lastError > 3000) {
      error = 3001;
    }
    else if (lastError < -3000) {
      error = -3001;
    }
    else if (lastError > 351) {
      error = lastError + 8;
    }
    else if (lastError < -351) {
      error = lastError - 8;
    }
    else if (lastError >= 1) {
      error = 352;
    }
    else if (lastError <= 1) {
      error = -352;
    }
  }
  return error;
}

void init () {

  readCali();

  // set up sensorArray
  SetSensorLowspeed(SENS_PORT);
  LSA_WakeUp(SENS_PORT, SENS_CODE);

  // set up splitter
  SetSensor(S4, SENSOR_LOWSPEED);
  if (!HTSMUXscanPorts(S4)) {
    TextOut(0, LCD_LINE1, "Splitter not");
    TextOut(0, LCD_LINE2, "Working!");
    Wait(1000);
    StopAllTasks();
  }
  
  // set up accr
  initAccr();
  
  // set up NormalSensor
  if (!smuxSetSensorLegoLight(IN_4_3, true)) {
    TextOut(0, LCD_LINE1, "IN_4_3 failed!");
    Wait(1000);
    StopAllTasks();
  }
  
  // set values
  lastTick = CurrentTick();
  startTick = CurrentTick();

  accl tilt;
  IMU_ReadAcceleration(IN_1, 0x22, tilt);

  startTiltX = tilt.tx;
  startTiltY = tilt.ty;
  
}





bool MoveUntilNoBlock(int dir, int extraTime = 0, bool stopOnLine = false) {
  int status = 0;
  long startTick = CurrentTick();
  while (true) {

    // detect line
    if( stopOnLine && CurrentTick() - startTick > 500 && LSA_ReadRaw_Calibrated (SENS_PORT, SENS_CODE, sens) ) {
      CorrectSens(sens);
      if (seeLine(sens)) {
        return true;
      }
    }

    unsigned long oldTick;
    switch (status) {
      case 0:
        if (sensUS(dir) < 15) {
          status++;
        }
        break;
      case 1:
        if (sensUS(dir) > 15) {
          status++;
        }
        break;
      case 2:
        oldTick = CurrentTick();
        status++;
        break;
      case 3:
        if (CurrentTick() - oldTick > extraTime) {
          return false;
        }
        break;
    }

  }
}

void Obstacle (byte dir) {
  MoveTo(dir,1800);
  StopMove();
  
  MoveTo(FRONT);
  MoveUntilNoBlock(!dir,1200);
  StopMove();

  for (int i=0; i<2; i++) {
    MoveTo(!dir,1600);
    StopMove();
  
    MoveTo(FRONT);
    if (MoveUntilNoBlock(!dir,1400,i)) {
      // robot is on line
      Wait(200);
      MoveTo(dir);
      untilSeeLine();
      break;
    }
    StopMove();
  }
  
}

bool isFlat () {
  accl tilt;
  IMU_ReadAcceleration(IN_1, 0x22, tilt);
  int tiltTX = tilt.tx;
  int tiltTY = tilt.ty;
  return tiltTX - startTiltX  > -10 && tiltTX - startTiltX  < 10 && tiltTY - startTiltY > -10 && tiltTY - startTiltY < 10;
}

void ramp (int dir) {
  if (dir == UP) {
    while (true) {
    
      if (isFlat()) {
        break;
      }

      for ( int i=0; i < 8; i++) {
        sens[i] = 0;
      }
      if( LSA_ReadRaw_Calibrated (SENS_PORT, SENS_CODE, sens) ) {
        CorrectSens(sens);
        // REMEMBER: the index is REVERSED, so sens[7] is LEFT and sens[0] is RIGHT!
        Debug("sen7",sens[7],1);
        Debug("sen0",sens[0],2);
        if (sens[7] > BLACK || sens[6] > BLACK) { // left
          Move(0,100,false);
        }
        else if (sens[0] > BLACK || sens[1] > BLACK) { // right
          Move(100,0,false);
        }
        else if (sens[2] > BLACK || sens[3] > BLACK || sens[4] > BLACK || sens[5] > BLACK) { // forward
          Move(100,100,false);
        }
      }
    }
  }
  else if (dir == DOWN) {
    int status = LEFT;
    while (true) {

      if (isFlat()) {
        break;
      }

      for ( int i=0; i < 8; i++) {
        sens[i] = 0;
      }
      if( LSA_ReadRaw_Calibrated (SENS_PORT, SENS_CODE, sens) ) {
        CorrectSens(sens);
        // REMEMBER: the index is REVERSED, so sens[7] is LEFT and sens[0] is RIGHT!

        switch (status) {
          case LEFT:
            Move(0,50);
            if (sens[0] > BLACK) {
              status = RIGHT;
            }
            break;
            
          case RIGHT:
            Move(50,0);
            if (sens[7] > BLACK) {
              status = LEFT;
            }
            break;
        }


      }
    }
  }
  
  // code here
  
}

void followLine () {

  int next = false;
  int i;
  while (!next) {

    for ( i=0; i < 8; i++) {
      sens[i] = 0;
    }
    if( LSA_ReadRaw_Calibrated (SENS_PORT, SENS_CODE, sens) ) {
      CorrectSens(sens);
      int status = getStatus(sens);
      switch (status) {

        case EVACUATION_FIELD:
          next = true;
          break;

        case MOVE_UP:
          ramp(UP);
          break;
        
        case MOVE_DOWN:
          ramp(DOWN);
          break;
        
        case MOVE_FORWARD:
          Move(75,75,false);
          Wait(500);
          Debug("MOVE_FORWARD",1,2);
          break;
          
        case MOVE_LEFT:
        case MOVE_RIGHT:

          int dir;
          if (status == MOVE_RIGHT) {
            Debug("MOVE_RIGHT",1,2);
            dir = RIGHT;
          }
          else {
            Debug("MOVE_LEFT",1,2);
            dir = LEFT;
          }

          MoveTo(FRONT);
          untilSeeLine(MIDDLE);
          MoveTo(dir);
          while (true) {
            if( LSA_ReadRaw_Calibrated (SENS_PORT, SENS_CODE, sens) ) {
              CorrectSens(sens);
              if (sens[3] > BLACK) {
                break;
              }
            }
          }
          StopMove();

          break;

        case OBSTACLE:
          Debug("OBSTACLE",1,2);
          Move(0,0);
          Obstacle(sensUS(RIGHT) > sensUS(LEFT)); // this works becuse RIGHT = 1 and LEFT = 0;
          break;

        default:
          Debug("FOLLOW_LINE",1,2);
          int error = getError(sens); // get the error value
          Debug("error",error,7);
          Debug("memory",memory,8);
          
          int base = 25;
          int turn = error * 0.21; // same as 75/350;

          int motorLeft = base + turn;
          int motorRight = base - turn;

          Move(motorLeft,motorRight);

          // will be used for calculating the error.
          if (memory == 0 && error == 0) {
            memory = 0;
          }
          else {
            memory = memory * (2/3) + error;
          }
          lastError = error;
      }
    }
  }
}

void moveGrabberTo (int dir) {
  if (dir == UP) {
    OnRev(OUT_B,50);
    int oldRotaB = 0;
    int thisRotaB;
    Wait(200);
    while (true) {
      Wait(100);
      thisRotaB = MotorRotationCount(OUT_B);
      if (thisRotaB-oldRotaB > -20) {
        Off(OUT_B);
        break;
      }
      oldRotaB = thisRotaB;
    }
  }
  else {
    OnFwd(OUT_B,50);
    until(MotorRotationCount(OUT_B) >= 0);
    Off(OUT_B);
  }
}

void evacuationField () {
  ClearScreen();
  // MoveTo( direction, waitTime, speed );

  int dir, senValue;
  
  // TODO: auto detect dir
  dir = LEFT;

  int status = 0;
  int sideValue;
  int goTo = 0;
  int ballMaxDist = 50;
  int turnSpeed = 85;
  
  int writeTo = 0;
  int see255_0 = false;
  int see255_1 = false;
  int see255_2 = false;
  
  MoveTo(FRONT,2000);

  while (status < 5) {
    Debug("status",status,1);
    switch (status) {
      // # Search for the ball
      case 0:
        MoveTo(FRONT,0,60);
        while (true) {
          senValue = sensUS(dir);
          Debug("senDirValue", senValue,3);
          if (senValue <= ballMaxDist) {
            StopMove();
            sideValue = senValue;
            break;
          }
        }
        status++;
        break;

      // # Rotate to the ball
      case 1:
        MoveTo(dir,0,turnSpeed);
        while (true) {
          senValue = sensUS(FRONT);
          Debug("senFrontValue", senValue,2);
          if (senValue < sideValue) {
            StopMove();
            break;
          }
        }
        status = 3;
        break;

      // #  Point to the right side of the ball
      case 2:
        MoveTo(!dir,0,turnSpeed);
        Debug("!dir",dir,5);
        int status_c4 = 0;
        long startTick_c4 = CurrentTick();
        while (status_c4 < 2) {
          if (CurrentTick() - startTick_c4 > 2000) {
            // go to dir
            MoveTo(dir,0,turnSpeed);
            Debug("dir",dir,5);
            until(sensUS(FRONT) > ballMaxDist);
            status_c4 = 2;
            break;
          }

          switch (status_c4) {
            case 0:
              if (sensUS(FRONT) <= ballMaxDist) {
                status_c4++;
                break;
              }
            case 1:
              if (sensUS(FRONT) > ballMaxDist) {
                status_c4++;
                break;
              }
          }
        }
        StopMove();
        status++;
        break;

      // # Point to the center of the ball
      case 3:
        while (true) {
        
          // what to do:
          //  - make shur that you are close to the ball by:
          //     - see if you get 3 time 255 in a row
          //     - move back until you see somthing
          //        - if this takes to long; realine the robot
          //     - move move just anof forward
          //     - grab the ball

          MoveTo(dir,0,turnSpeed);
          until(sensUS(FRONT) < sideValue + 5);

          int lowestValue = 255;
          while (true) {
            if (sensUS(FRONT) > sideValue + 5) {
              break;
            }
            if (sensUS(FRONT) < lowestValue) {
              lowestValue = sensUS(FRONT);
            }
          }

          StopMove();
          
          //int time = endObjTick - startObjTick;
          MoveTo(!dir,0,turnSpeed);
          
          until(sensUS(FRONT) <= lowestValue + 5);
          
          StopMove();
          break;
          
        }
        if (goTo != 0) {
          status = goTo;
          break;
        }
        else {
          status++;
          break;
        }

      // # Determine if the robot is ready to grap the ball
      case 4:
        MoveTo(FRONT,0,60);
        int redo = false;
        while (true) {
          if (sensUS(FRONT) == 255) {
            if (see255_0 && see255_1 && see255_2) {
              // grab the ball
              Debug("GRABBING!!",1,4);
              Move(-60,-60,false);
              until(sensUS(FRONT) < 255);
              Wait(100);
              StopMove();
              goTo = 5;
              redo = true;
              break;
            }
            else {
              switch (writeTo) {
                case 0:
                  see255_0 = true;
                  writeTo++;
                  break;
                  
                case 1:
                  see255_1 = true;
                  writeTo++;
                  break;

                case 2:
                  see255_2 = true;
                  writeTo = 0;
                  break;
              }
            }
          }
          else {
            switch (writeTo) {
              case 0:
                see255_0 = false;
                writeTo++;
                break;

              case 1:
                see255_1 = false;
                writeTo++;
                break;

              case 2:
                see255_2 = false;
                writeTo = 0;
                break;

            }
          }

          if (sensUS(FRONT) > sideValue + 5) {
            // reposition robot
            redo = true;
            break;
          }
        }
        StopMove();
        
        if (redo) {
          status = 2;
          break;
        }
        else {
          status++;
          break;
        }
    }
  }

  // # Grab the ball
  moveGrabberTo(DOWN);
  
  for (int i; i<20; i++) {
    MoveTo(FRONT,200,50);
    StopMove();
    Wait(200);
  }

  

  moveGrabberTo(UP);
  
  until(false);

}

task main () {

  init();

  int status = Select("normal","evacuation");

  moveGrabberTo(UP);

  
  while (status < 2) {
  
    switch (status) {

      case 0:
        followLine();
        status++;
        break;
      case 1:
        evacuationField();
        status++;
        break;
    }
  }
}
