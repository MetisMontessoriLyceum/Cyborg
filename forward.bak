#include "NXCDefs.h"
#include "HTSMUX-driver.h"

#define HalfChageVal 300
#define FullChageVal 800
typedef struct {
  int light;
  int dark;
} CaliSens;
// 13s
// Define values
/*
float Kp = 0.4;
float Ki = 0;//0.05;
float Kd = 0.1;//0.2;
float offset;
float Tp = 75;
float integral = 0;
float lastError = 0;
float derivative = 0;
*/float error;
float turn;

long minBlack = 30;

void init () {

  SetSensorType(IN_1, SENSOR_TYPE_LIGHT_ACTIVE);
  SetSensorType(IN_2, SENSOR_TYPE_LIGHT_ACTIVE);
  SetSensorType(IN_3, SENSOR_TYPE_LIGHT_ACTIVE);
  SetSensor(S4, SENSOR_LOWSPEED);

  // Tell the SMUX to start scanning its ports.
  // this takes 500ms
  if (!HTSMUXscanPorts(S4)) {
    // Scan failed, handle the error
    TextOut(0, LCD_LINE1, "Scan failed!");
    Wait(1000);
    StopAllTasks();
  }
  
  if (!smuxSetSensorLegoLight(msensor_S4_1, true)) {
    TextOut(0, LCD_LINE1, "smux sens 1 failed!");
    Wait(1000);
    StopAllTasks();
  }
  if (!smuxSetSensorLegoLight(msensor_S4_2, true)) {
    TextOut(0, LCD_LINE1, "smux sens 2 failed!");
    Wait(1000);
    StopAllTasks();
  }
  if (!smuxSetSensorLegoLight(msensor_S4_3, true)) {
    TextOut(0, LCD_LINE1, "smux sens 3 failed!");
    Wait(1000);
    StopAllTasks();
  }
  if (!smuxSetSensorLegoLight(msensor_S4_4, true)) {
    TextOut(0, LCD_LINE1, "smux sens 4 failed!");
    Wait(1000);
    StopAllTasks();
  }

}

int port (int pontNum) {
  int ret;
  switch (pontNum) {
    case 1:
      ret = IN_1;
      break;
    case 2:
      ret = IN_1;
      break;
    case 3:
      ret = IN_1;
      break;
    case 4:
      ret = IN_1;
      break;
  }
  return ret;
}

long rawSens (int num) {
  long ret;
  switch (num) {
    case 0:
      ret = smuxSensorLegoLightNorm(msensor_S4_2);
      break;
    case 1:
      ret = smuxSensorLegoLightNorm(msensor_S4_1);
      break;
    case 2:
      ret = Sensor(IN_3)/10;
      break;
    case 3:
      ret = Sensor(IN_2)/10;
      break;
    case 4:
      ret = Sensor(IN_1)/10;
      break;
    case 5:
      ret = smuxSensorLegoLightNorm(msensor_S4_4);
      break;
    case 6:
      ret = smuxSensorLegoLightNorm(msensor_S4_3);
      break;
    default:
      ClearScreen();
      TextOut(0, LCD_LINE1, "Error:");
      TextOut(0, LCD_LINE2, "num can only be 1 to 3");
      Wait(1000);
  }
  ret = 100-ret;
  /*if (num == 5) {
    ret = 100-ret;
  }*/
  return ret;
}

long sens (int num) {
  long ret = rawSens(num);
  /*switch (num) {
    case 0:
      ret = smuxSensorLegoLightNorm(msensor_S4_2);
      break;
    case 1:
      ret = smuxSensorLegoLightNorm(msensor_S4_1);
      break;
    case 2:
      ret = Sensor(IN_3)/10;
      break;
    case 3:
      ret = Sensor(IN_2)/10;
      break;
    case 4:
      ret = Sensor(IN_1)/10;
      break;
    case 5:
      ret = smuxSensorLegoLightNorm(msensor_S4_4);
      break;
    case 6:
      ret = smuxSensorLegoLightNorm(msensor_S4_3);
      break;
    default:
      ClearScreen();
      TextOut(0, LCD_LINE1, "Error:");
      TextOut(0, LCD_LINE2, "num can only be 1 to 3");
      Wait(1000);
  }
  ret = 100-ret;*/
  //ret = (ret - cali[num].light) * (100/(cali[num].dark-cali[num].light));
  if (ret < 0) {
    ret = 0;
  }
  if (ret > 100) {
    ret = 100;
  }
  
  /*SetSensorType(port(num), IN_TYPE_LIGHT_ACTIVE);
  ret = rawSens(num) - (ret - rawSens(num));
  
  SetSensorType(port(num), IN_TYPE_LIGHT_INACTIVE);
  ret = rawSens(num);*/

  
  /*if (num == 5) {
    ret = 100-ret;
  }*/
  return ret;
}

int line (int line) {
  int ret;
  switch (line) {
    case 1:
      ret = LCD_LINE1;
      break;
    case 2:
      ret = LCD_LINE2;
      break;
    case 3:
      ret = LCD_LINE3;
      break;
    case 4:
      ret = LCD_LINE4;
      break;
    case 5:
      ret = LCD_LINE5;
      break;
    case 6:
      ret = LCD_LINE6;
      break;
    case 7:
      ret = LCD_LINE7;
      break;
    case 8:
      ret = LCD_LINE8;
      break;
  }
  return ret;
}

void Move (int motorL, int motorR) {
  motorL = -motorL;
  motorR = -motorR;
  if (motorL > 100) {
    motorL = 100;
  }
  else if (motorL < -100) {
    motorL = -100;
  }
  if (motorR > 100) {
    motorR = 100;
  }
  else if (motorR < -100) {
    motorR = -100;
  }
  if (motorL == motorR && motorL != 0) {
    if (motorL >= 0) {
      OnFwd(OUT_AC,motorL);
    }
    else {
      OnRev(OUT_AC,0-motorL);
    }
  }
  else {
    if (motorL == 0) {
      Off(OUT_A);
    }
    else if (motorL >= 0) {
      OnFwd(OUT_A,motorL);
    }
    else {
      OnRev(OUT_A,0-motorL);
    }

    if (motorR == 0) {
      Off(OUT_C);
    }
    else if (motorR >= 0) {
      OnFwd(OUT_C,motorR);
    }
    else {
      OnRev(OUT_C,0-motorR);
    }
  }
}

long getCurrent () {
  return (
    sens(1)
    + sens(2)*100
    + sens(3)*200
    + sens(4)*300
    + sens(5)*400
  )
    /
  (
    sens(1)
    + sens(2)
    + sens(3)
    + sens(4)
    + sens(5)
  );
  /*static int lastRet;
  float ret;

  if (sens(0) > FullChageVal) {
    ret = -3;
  }
  else if (sens(1) > FullChageVal) {
    ret = -2;
  }
  else if (sens(2) > FullChageVal) {
    ret = -1;
  }
  else if (sens(3) > FullChageVal) {
    ret = 0;
  }
  else if (sens(4) > FullChageVal) {
    ret = 1;
  }
  else if (sens(5) > FullChageVal) {
    ret = 2;
  }
  else if (sens(6) > FullChageVal) {
    ret = 3;
  }
  else if (sens(0) > HalfChageVal) {
    ret = -2.5;
  }
  else if (sens(1) > HalfChageVal) {
    ret = -1.5;
  }
  else if (sens(2) > HalfChageVal) {
    ret = -0.5;
  }
  else if (sens(3) > HalfChageVal) {
    ret = 0.5;
  }
  else if (sens(4) > HalfChageVal) {
    ret = 1.5;
  }
  else if (sens(5) > HalfChageVal) {
    ret = 2.5;
  }
  else {
    ret = lastRet;
  }
  lastRet = ret;
  return ret;*/
}

void debugNum (int line, int num) {
  ClearLine(line);
  NumOut(0,line,num);
}

task perfectMotor () {
  long lastA = 0;
  long lastC = 0;
  while (true) {
    debugNum(LCD_LINE1,-MotorRotationCount(OUT_A)- lastA);
    debugNum(LCD_LINE2,-MotorRotationCount(OUT_C)- lastC);
    lastA=-MotorRotationCount(OUT_A);
    lastC=-MotorRotationCount(OUT_C);
    Wait(100);
  }
}

task main () {
  init();
  Precedes(perfectMotor);
  //readCali();
  //offset = getCurrent();
  // run PID
  Move(75,75);
  until(false);
}
