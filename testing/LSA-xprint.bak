const byte SensorPort  =  IN_1;
#define ADDR     0x14
#include "LSA-lib.nxc"

bool needStop = false;

string msg;
string x;
int s, i;

byte message[];
unsigned byte buf[20];
unsigned byte sens[8];
int count, l;
byte nByteReady = 0;
int lastError = 0;
float memory = 0;

void init () {
  SetSensorLowspeed(SensorPort);
  LSA_WakeUp(SensorPort, ADDR);
  Wait(50);
}

void Move (int left, int right) {
  if (left > 100) {
    float change = left/100;
    left = left/change;
    right = right/change;
  }
  else if (left < -100) {
    float change = left/-100;
    left = left/change;
    right = right/change;
  }
  if (right > 100) {
    float change = right/100;
    left = left/change;
    right = right/change;
  }
  else if (right < -100) {
    float change = right/-100;
    left = left/change;
    right = right/change;
  }

  if (left == 0) {
    Off(OUT_C);
  }
  else {
    OnFwd(OUT_C,left);
  }
  if (right == 0) {
    Off(OUT_A);
  }
  else {
    OnFwd(OUT_A,right);
  }

}

void CorrectSens (byte &array[]) {
  for (int i=0; i < 8; i++) {
    if (array[i] < 0) {
      array[i] = 0;
    }
    else if (array[i] > 100) {
      array[i] = 100;
    }
    array[i] = 100 - array[i];
  }
}

bool seeLine (byte sensor[]) {
  return (sensor[0] > 20 || sensor[1] > 20 || sensor[2] > 20 || sensor[3] > 20 || sensor[4] > 20 || sensor[5] > 20 || sensor[6] > 20 || sensor[7] > 20);
}

int getError (byte sensor[]) {
  int error;
  error = 350 - (sensor[0] + sensor[1]*100 + sensor[2]*200 + sensor[3]*300 + sensor[4]*400 + sensor[5]*500 + sensor[6]*600 + sensor[7]*700) / ( sensor[0] + sensor[1] + sensor[2] + sensor[3] + sensor[4] + sensor[5] + sensor[6] + sensor[7] );
  if (error >= 350 || error <= -350) {
    if (!seeLine(sensor) && memory > -250 && memory < 250) {
      error = 0;
    }
    else if (lastError > 351) {
      error = lastError + 1;
    }
    else if (lastError < -351) {
      error = lastError - 1;
    }
    else if (lastError >= 0) {
      error = 352;
    }
    else {
      error = -352;
    }
  }
  return error;
}

task controller () {
  while (true) {
    for (i=0; i < 8; i++) {
      sens[i] = 0;
    }
    if( LSA_ReadRaw_Calibrated (SensorPort, ADDR, sens) ) {
      if (needStop) {
        needStop = false;
        Stop(true);
      }
      CorrectSens(sens);
      float error = getError(sens);

      ClearLine(LCD_LINE1);
      NumOut(0,LCD_LINE1,error);

      float base = 50;
      float turn = error * 0.14;//(50/350);

      ClearLine(LCD_LINE2);
      NumOut(0,LCD_LINE2,turn);

      ClearLine(LCD_LINE3);
      NumOut(0,LCD_LINE3,seeLine(sens));

      Move(base+turn,base-turn);
      memory = memory * (2/3) + error;
      ClearLine(LCD_LINE4);
      NumOut(0,LCD_LINE4,memory);
      lastError = error;
    }
    else {
      ClearLine(LCD_LINE1);
      TextOut(0,LCD_LINE1,"an error");
      ClearLine(LCD_LINE2);
      TextOut(0,LCD_LINE2,"occurred :-(");
    }
  }
}

task closinig () {
  until(ButtonPressed(BTNCENTER,false));
  needStop = true;
  until(!needStop);
  LSA_Sleep(SensorPort,ADDR);
  StopAllTasks();
}

task main () {
  init();
  Precedes(controller,closinig);
}
