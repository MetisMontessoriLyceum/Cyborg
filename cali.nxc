#include "NXCDefs.h"
#include "HTSMUX-driver.h"

// Define values
//int cali[7][2];

typedef struct {
  int light;
  int dark;
} CaliSens;

void init () {

  SetSensorType(IN_1, SENSOR_TYPE_LIGHT_ACTIVE);
  SetSensorType(IN_2, SENSOR_TYPE_LIGHT_ACTIVE);
  SetSensorType(IN_3, SENSOR_TYPE_LIGHT_ACTIVE);
  SetSensor(S4, SENSOR_LOWSPEED);

  // Tell the SMUX to start scanning its ports.
  // this takes 500ms
  if (!HTSMUXscanPorts(S4)) {
    // Scan failed, handle the error
    TextOut(0, LCD_LINE1, "Scan failed!");
    Wait(1000);
    StopAllTasks();
  }
  
  if (!smuxSetSensorLegoLight(msensor_S4_1, true)) {
    TextOut(0, LCD_LINE1, "smux sens 1 failed!");
    Wait(1000);
    StopAllTasks();
  }
  if (!smuxSetSensorLegoLight(msensor_S4_2, true)) {
    TextOut(0, LCD_LINE1, "smux sens 2 failed!");
    Wait(1000);
    StopAllTasks();
  }
  if (!smuxSetSensorLegoLight(msensor_S4_3, true)) {
    TextOut(0, LCD_LINE1, "smux sens 3 failed!");
    Wait(1000);
    StopAllTasks();
  }
  if (!smuxSetSensorLegoLight(msensor_S4_4, true)) {
    TextOut(0, LCD_LINE1, "smux sens 4 failed!");
    Wait(1000);
    StopAllTasks();
  }
  
  

}

int sens (int num) {
  int ret;
  switch (num) {
    case 0:
      ret = smuxSensorLegoLightNorm(msensor_S4_2);
      break;
    case 1:
      ret = smuxSensorLegoLightNorm(msensor_S4_1);
      break;
    case 2:
      ret = Sensor(IN_3)/10;
      break;
    case 3:
      ret = Sensor(IN_2)/10;
      break;
    case 4:
      ret = Sensor(IN_1)/10;
      break;
    case 5:
      ret = smuxSensorLegoLightNorm(msensor_S4_4);
      break;
    case 6:
      ret = smuxSensorLegoLightNorm(msensor_S4_3);
      break;
    default:
      ClearScreen();
      TextOut(0, LCD_LINE1, "Error:");
      TextOut(0, LCD_LINE2, "num can only be 1 to 3");
      Wait(1000);
  }
  return 100-ret;
}

void Move (int motorL, int motorR) {
  motorL = -motorL;
  motorR = -motorR;
  if (motorL == 0) {
    Off(OUT_A);
  }
  else if (motorL >= 0) {
    OnFwd(OUT_A,motorL);
  }
  else {
    OnRev(OUT_A,0-motorL);
  }

  if (motorR == 0) {
    Off(OUT_C);
  }
  else if (motorR >= 0) {
    OnFwd(OUT_C,motorR);
  }
  else {
    OnRev(OUT_C,0-motorR);
  }
}

int getCurrent () {
  return (
    sens(0)
    + sens(1)*1000
    + sens(2)*2000
    + sens(3)*3000
    + sens(4)*4000
    + sens(5)*5000
    + sens(6)*6000
  )
    /
  (
    sens(0)
    + sens(1)
    + sens(2)
    + sens(3)
    + sens(4)
    + sens(5)
    +sens(6)
  );
}

void debugNum (int line, int num) {
  ClearLine(line);
  NumOut(0,line,num);
}
/*void debugAll (int type) {
  debugNum(LCD_LINE1,sens(1));
  debugNum(LCD_LINE2,sens(2));
  debugNum(LCD_LINE3,sens(3));
  debugNum(LCD_LINE4,sens(4));
  debugNum(LCD_LINE5,sens(5));
  debugNum(LCD_LINE6,Tp+turn);
  debugNum(LCD_LINE7,Tp-turn);
  //debugNum(LCD_LINE7,type);
  debugNum(LCD_LINE8,getCurrent());
}*/


task main () {
  init();
  
  CaliSens cali[7];

  for (int i=0; i<7; i++) {
    cali[i].light = sens(i);
    cali[i].dark = sens(i);
  }

  Move(-40,40);
  long oldTime = CurrentTick();
  while (CurrentTick() < oldTime + 10000) {
    for (int i=0; i<7; i++) {
      if (sens(i) < cali[i].light)  {
        cali[i].light = sens(i);
      }
      else if (sens(i) > cali[i].dark) {
        cali[i].dark = sens(i);
      }
    }
  }

  /*for (int i=0; i<7; i++) {
    cali[i].light = cali[i].light + 10;
    cali[i].dark = cali[i].dark - 10;
  }*/
  
  // save
  string filename = "cali.txt";
  DeleteFile(filename);
  byte file = fopen(filename, "w");
  if (file == NULL) {
    StopAllTasks();
  }
  for (int i=0; i<7; i++) {
    fputs(NumToStr(cali[i].light), file);
    fputs("\n", file);
    fputs(NumToStr(cali[i].dark), file);
    fputs("\n", file);
  }
  fflush(file);
  fclose(file);
}
