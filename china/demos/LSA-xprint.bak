/************************************************************************/
/*                                                                      */
/* Program Name: LSA-xprint.nxc */
/* =============================                                        */
/*                                                                      */
/* Copyright (c) 2008 by mindsensors.com                                */
/* Email: info (<at>) mindsensors (<dot>) com                           */
/*                                                                      */
/* This program is free software. You can redistribute it and/or modify */
/* it under the terms of the GNU General Public License as published by */
/* the Free Software Foundation; version 3 of the License.              */
/* Read the license at: http://www.gnu.org/licenses/gpl.txt             */
/*                                                                      */
/************************************************************************/
/*
 * When        Who             Comments
 * 08/28/12    Deepak Patil    based on LL-raw-sample.nxc
 */

const byte SensorPort  =  IN_2;
#define ADDR     0x14
#include "../lib/LSA-lib.nxc"

int cb;
task button_handler()
{
  while (true) {
  
     if ( ButtonPressed(BTNCENTER, true) ) {
         while (ButtonPressed(BTNCENTER, true)) ;            //debounce the switch
      cb ++;
    }

  }// end of while
  Wait(500);   // don't hog the CPU.
}

task main ()
{

  string msg;
  string x;
  int s, i;

  byte message[];
  unsigned byte buf[20];
  unsigned byte rawCalibrated[8];
  unsigned int rawUncalibrated[8];
  int count, l;
  byte nByteReady = 0;

  StartTask(button_handler);
  SetSensorLowspeed(SensorPort);
  LSA_WakeUp(SensorPort, ADDR);
  Wait(50);
  cb = 1;

  while ( true ) {
    if ( cb % 2 ) {
      for ( i=0; i < 8; i++) {
        rawCalibrated[i] = 0;
      }
      if( LSA_ReadRaw_Calibrated (SensorPort, ADDR, rawCalibrated) ) {

        for ( i=0; i < 8; i++) {
           RectOut ((80-(i*10)), 0, 10, rawCalibrated[i]/5, i==0);
        }
        msg = "chart: (Cal)";
        TextOut(0, LCD_LINE1, msg, false);
      }
    } else {
      for ( i=0; i < 8; i++) {
        rawUncalibrated[i] = 0;
      }
      if ( LSA_ReadRaw_Uncalibrated (SensorPort, ADDR, rawUncalibrated) ) {
        for ( i=0; i < 8; i++) {
           RectOut ((80-(i*10)), 0, 10, rawUncalibrated[i]/5, i==0);
        }
        msg = "chart: (UnCal)";
        TextOut(0, LCD_LINE1, msg, false);
      }
    }
    Wait(500);
  }

}
