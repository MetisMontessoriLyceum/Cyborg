#include "lib/HTSMUX-driver.h"

#define IN_1_1 msensor_S1_1
#define IN_1_2 msensor_S1_2
#define IN_1_3 msensor_S1_3
#define IN_1_4 msensor_S1_4
#define IN_2_1 msensor_S2_1
#define IN_2_2 msensor_S2_2
#define IN_2_3 msensor_S2_3
#define IN_2_4 msensor_S2_4
#define IN_3_1 msensor_S3_1
#define IN_3_2 msensor_S3_2
#define IN_3_3 msensor_S3_3
#define IN_3_4 msensor_S3_4
#define IN_4_1 msensor_S4_1
#define IN_4_2 msensor_S4_2
#define IN_4_3 msensor_S4_3
#define IN_4_4 msensor_S4_4

typedef struct {
  int light;
  int dark;
} calibration;

void Move (int left, int right, bool autofix = true) {

  if (autofix) {

    if (left > 0) {
      left = left * 0.4 + 60;
    }
    else if (left < 0) {
      left = left * 0.4 - 60;
    }
    if (right > 0) {
      right = right * 0.4 + 60;
    }
    else if (right < 0) {
      right = right * 0.4 - 60;
    }
  }

  if (left > 100) {
    left = 100;
  }
  else if (left < -100) {
    left = -100;
  }

  if (right > 100) {
    right = 100;
  }
  else if (right < -100) {
    right = -100;
  }

  if (left == 0) {
    Off(OUT_A);
  }
  else {
    OnRev(OUT_A,left);
  }
  if (right == 0) {
    Off(OUT_C);
  }
  else {
    OnRev(OUT_C,right);
  }
}

int getSens (int port) {
  if (port == IN_1 || port == IN_2 || port == IN_3 || port == IN_4) {
    return Sensor(port);
  }
  else {
    return smuxSensorLegoLightNorm(port);
  }
}

void init () {
// set up splitter
  SetSensor(S4, SENSOR_LOWSPEED);
  if (!HTSMUXscanPorts(S4)) {
    TextOut(0, LCD_LINE1, "Splitter not");
    TextOut(0, LCD_LINE2, "Working!");
    Wait(1000);
    StopAllTasks();
  }

  // set up NormalSensor
  if (!smuxSetSensorLegoLight(IN_4_3, true)) {
    TextOut(0, LCD_LINE1, "IN_4_3 failed!");
    Wait(1000);
    StopAllTasks();
  }
}

task main () {

  init();

  Move(75,-75,false);

  calibration middleSens;

  long startTick = CurrentTick();
  int curSenVal;
  curSenVal = getSens(IN_4_3);
  middleSens.light = curSenVal;
  middleSens.dark = curSenVal;
  
  while (CurrentTick() < startTick + 5000) {
    curSenVal = getSens(IN_4_3);
    if (curSenVal < middleSens.light)  {
      middleSens.light = curSenVal;
    }
    else if (curSenVal > middleSens.dark) {
       middleSens.dark = curSenVal;
    }
  }
  
  
  // save
  string filename = "caliSensMiddle.txt";
  DeleteFile(filename);
  byte file = fopen(filename, "w");
  if (file == NULL) {
    StopAllTasks();
  }
  fputs(NumToStr(middleSens.light), file);
  fputs("\n", file);
  fputs(NumToStr(middleSens.dark), file);
  fputs("\n", file);
  fflush(file);
  fclose(file);
  
}
